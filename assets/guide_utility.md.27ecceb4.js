import{_ as n,c as a,o as s,a as t}from"./app.f97aa63c.js";const f='{"title":"Utility","description":"","frontmatter":{},"headers":[{"level":2,"title":"batchInsert","slug":"batchinsert"},{"level":2,"title":"now","slug":"now"},{"level":2,"title":"binToUuid","slug":"bintouuid"},{"level":2,"title":"uuidToBin","slug":"uuidtobin"}],"relativePath":"guide/utility.md"}',p={},o=t(`<h1 id="utility" tabindex="-1">Utility <a class="header-anchor" href="#utility" aria-hidden="true">#</a></h1><p>A collection of utilities that the knex library provides for convenience.</p><h2 id="batchinsert" tabindex="-1">batchInsert <a class="header-anchor" href="#batchinsert" aria-hidden="true">#</a></h2><p><strong>knex.batchInsert(tableName)</strong></p><p>The <code>batchInsert</code> utility will insert a batch of rows wrapped inside a transaction <em>(which is automatically created unless explicitly given a transaction using <a href="#Builder-transacting">transacting</a>)</em>, at a given <code>chunkSize</code>.</p><p>It&#39;s primarily designed to be used when you have thousands of rows to insert into a table.</p><p>By default, the <code>chunkSize</code> is set to 1000.</p><p>BatchInsert also allows for <a href="#Builder-returning">returning values</a> and supplying transactions using <a href="#Builder-transacting">transacting</a>.</p><div class="language-js"><pre><code><span class="token keyword">const</span> rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> chunkSize <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
knex<span class="token punctuation">.</span><span class="token function">batchInsert</span><span class="token punctuation">(</span><span class="token string">&#39;TableName&#39;</span><span class="token punctuation">,</span> rows<span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">returning</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ids</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

knex<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> knex<span class="token punctuation">.</span><span class="token function">batchInsert</span><span class="token punctuation">(</span><span class="token string">&#39;TableName&#39;</span><span class="token punctuation">,</span> rows<span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">transacting</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="now" tabindex="-1">now <a class="header-anchor" href="#now" aria-hidden="true">#</a></h2><p><strong>knex.fn.now(precision)</strong></p><p>Return the current timestamp with a precision (optional)</p><div class="language-js"><pre><code>table<span class="token punctuation">.</span><span class="token function">datetime</span><span class="token punctuation">(</span><span class="token string">&#39;some_time&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">precision</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">defaultTo</span><span class="token punctuation">(</span>knex<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="bintouuid" tabindex="-1">binToUuid <a class="header-anchor" href="#bintouuid" aria-hidden="true">#</a></h2><p><strong>knex.fn.binToUuid(binaryUuid)</strong></p><p>Convert a binary uuid (binary(16)) to a string uuid (char(36))</p><div class="language-js"><pre><code>knex<span class="token punctuation">.</span>schema<span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span><span class="token string">&#39;uuid_table&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  t<span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token string">&#39;uuid_col_binary&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">useBinaryUuid</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;uuid_table&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">uuid_col_binary</span><span class="token operator">:</span>  knex<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">uuidToBin</span><span class="token punctuation">(</span><span class="token string">&#39;3f06af63-a93c-11e4-9797-00505690773f&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="uuidtobin" tabindex="-1">uuidToBin <a class="header-anchor" href="#uuidtobin" aria-hidden="true">#</a></h2><p><strong>knex.fn.uuidToBin(uuid)</strong></p><p>Convert a uuid (char(16)) to a binary uuid (binary(36))</p><div class="language-ts"><pre><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">knex</span><span class="token punctuation">(</span><span class="token string">&#39;uuid_table&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&#39;uuid_col_binary&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
knex<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">binToUuid</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>uuid_col_binary<span class="token punctuation">)</span>
</code></pre></div>`,21),e=[o];function c(u,i,l,k,r,d){return s(),a("div",null,e)}var b=n(p,[["render",c]]);export{f as __pageData,b as default};
